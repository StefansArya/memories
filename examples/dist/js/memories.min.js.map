{"version":3,"sources":["webpack://memories/./src/memories.js","webpack://memories/./src/index.js"],"names":["Memories","start","end","this","currentTime","currentJob","day","month","startCalDate","setToLocaleDateString","split","startCalTime","setToLocaleTimeString","endCalDate","endCalTime","h","i","s","H","I","S","push","parseInt","year","toString","match","getAccordingMonth","getMonthMemo","m","d","y","M","D","Y","includes","getOnlyTime","getOnlyDate","hour","minutes","seconds","onMonth","onDay","current","currentMinutes","Math","floor","getWeekAgo","length","date","toLocaleDateString","hour12","toLocaleTimeString","articleTime","document","querySelectorAll","cronJob","querySelector","forEach","time","Date","getAttribute","replace","setInterval","async","innerHTML","getMemoTime","getMemories","getCronJob"],"mappings":"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","file":"memories.min.js","sourcesContent":["/**\n * Memories\n * \n * Mengubah waktu pada artikel\n * \n * @author wadahkode <mvp.dedefilaras@gmail.com>\n * @since version 1.0.0\n */\nexport default class Memories {\n    constructor(start, end) {\n        this.start = start;\n        this.end = end;\n        this.currentTime = \"\";\n        this.currentJob = \"\";\n        this.day = 0;\n        this.month = 0;\n        this.startCalDate = this.setToLocaleDateString(this.start).split('/');\n        this.startCalTime = this.setToLocaleTimeString(this.start).split(/:| /);\n        this.endCalDate = this.setToLocaleDateString(this.end).split('/');\n        this.endCalTime = this.setToLocaleTimeString(this.end).split(/:| /);\n    }\n    \n    getCronJob() {\n        let [h,i,s] = this.endCalTime,\n            [H,I,S] = this.startCalTime,\n            experied = [];\n            \n        experied.push({\n            day: parseInt(this.startCalDate[0]),\n            month: parseInt(this.startCalDate[1]),\n            year: parseInt(this.startCalDate[2])\n        });\n        \n        \n        if ((parseInt(h) == H)) {\n            this.currentJob = \"saatnya bekerja\";\n            \n            return this.currentJob;\n        } else {\n            this.currentJob = \"Menunggu...\";\n            \n            return this.currentJob;\n        }\n    }\n    \n    getMemoTime() {\n        if (this.endCalDate.toString().match(this.startCalDate) && this.endCalTime.toString().match(this.startCalTime)) {\n            return 'baru saja';\n        }\n        else {\n            return this.getAccordingMonth();\n        }\n    }\n    \n    getAccordingMonth() {\n        switch(parseInt(this.endCalDate[0])) {\n            case 1: return this.getMonthMemo(31);\n            case 2: return this.getMonthMemo(29);\n            case 3: return this.getMonthMemo(31);\n            case 4: return this.getMonthMemo(30);\n            case 5: return this.getMonthMemo(31);\n            case 6: return this.getMonthMemo(30);\n            case 7: return this.getMonthMemo(31);\n            case 8: return this.getMonthMemo(31);\n            case 9: return this.getMonthMemo(30);\n            case 10: return this.getMonthMemo(31);\n            case 11: return this.getMonthMemo(30);\n            case 12: return this.getMonthMemo(31);\n        }\n    }\n    \n    getMonthMemo(day, month=12) {\n        let [m,d,y] = this.endCalDate,\n            [h,i,s] = this.endCalTime,\n            [M,D,Y] = this.startCalDate,\n            [H,I,S] = this.startCalTime;\n        \n        this.day = day;\n        this.month = month;\n        \n        if (this.endCalDate.includes(M) && this.endCalDate.includes(Y)) {\n            this.getOnlyTime(24,60,60,this.endCalDate.includes(M), this.endCalDate.includes(D));\n            \n            return this.currentTime;\n        } else {\n            this.getOnlyDate(month, day);\n            \n            return this.currentTime;\n        }\n    }\n    \n    getOnlyTime(hour, minutes, seconds, onMonth = false, onDay = false) {\n        let [h,i,s] = this.endCalTime,\n            [H,I,S] = this.startCalTime,\n            current;\n        \n        if (onMonth) {\n            if (onDay) {\n                //console.log((parseInt(i) == I));\n                // seconds\n                if ((parseInt(h) == H) && (parseInt(i) == I) && (parseInt(s) != S)) {\n                    this.currentTime = parseInt(s) + ' detik yang lalu';\n                }\n                // minutes\n                else if ((parseInt(h) == H) && (parseInt(i) != I)) {\n                    current = (parseInt(i) > I) && parseInt(i) - I;\n                    \n                    this.currentTime = (current < minutes) && parseInt(current) + ' menit yang lalu';\n                }\n                // minutes or hour\n                else if ((parseInt(h) != H)) {\n                    current = (parseInt(i) >= I) && (parseInt(i) - I) + minutes;\n                    // jika jam tidak sama dan menit sudah lebih dari 60,\n                    // maka jam sekarang dikurangi jam sebelumnya.\n                    if ((parseInt(h) > H) && (parseInt(h) < hour) && (current >= minutes)) {\n                        this.currentTime = (h - H) + ' jam yang lalu';\n                    } else {\n                        current = (parseInt(I) > i) && (parseInt(minutes - I) + parseInt(i));\n                        \n                        // jika jam sekarang lebih dari jam sebelumnya tetapi\n                        // menitnya masih dibawah 60 maka tampilkan menit yang sudah berlalu\n                        if ((current < 60) && (parseInt(h) > H)) {\n                            this.currentTime = (current) + ' menit yang lalu';\n                        } else {\n                            this.currentTime = (hour - parseInt(H - h)) + ' jam yang lalu';\n                        }\n                    }\n                }\n            } else {\n                let day = (this.day + parseInt(this.endCalDate[1])) - (this.day + parseInt(this.startCalDate[1])),\n                    currentMinutes;\n                \n                if (day == 1) {\n                    if ((parseInt(h) > parseInt(H))) {\n                        current = ((hour + parseInt(h)) - parseInt(H));\n                        if (current > hour) {\n                            this.currentTime = ((parseInt(this.endCalDate[1]) > this.startCalDate[1]) && (parseInt(this.endCalDate[1]) - this.startCalDate[1]) + ' hari yang lalu');\n                        }\n                    } else {\n                        current = ((hour + parseInt(h)) - parseInt(H));\n                        currentMinutes = (parseInt(minutes - I) + parseInt(i));\n                        \n                        if ((current == hour) && (currentMinutes) > minutes) {\n                            this.currentTime = (Math.floor(hour % current) + 1) + ' hari yang lalu';\n                        } else {\n                            //current = (Math.floor(hour % current));\n                            \n                            if (parseInt(currentMinutes) == minutes) {\n                                this.currentTime = (Math.floor(hour % current) + 1) + ' hari yang lalu';\n                            } else {\n                                this.currentTime = ((current) - 1) + ' jam yang lalu';\n                            }\n                        }\n                    }\n                } else {\n                    this.getOnlyDate(this.month, this.day);\n                }\n            }\n        } else {\n            this.getOnlyDate(this.month, this.day);\n        }\n    }\n    \n    getOnlyDate(month, day) {\n        let [m,d,y] = this.endCalDate,\n            [M,D,Y] = this.startCalDate,\n            current;\n        \n        if ((parseInt(m) > M) && (parseInt(d) >= D) && (parseInt(y) == Y)) {\n            current = (((d - D) + day) * (m - M));\n            \n            if (current >= month) {\n                this.currentTime = (m - M) + ' bulan yang lalu';\n            }\n        } else if ((parseInt(m) > M) && (parseInt(d) < D) && (parseInt(y) == Y)) {\n            current = (((d - D) + day) * (m - M));\n            //this.currentTime = (current) + ' hari yang lalu';\n            \n            if (current > 7 && current < 14) {\n                this.currentTime = this.getWeekAgo(1);\n            } else if (current > 14 && current < 21) {\n                this.currentTime = this.getWeekAgo(2);\n            } else if (current > 21 && current < day) {\n                this.currentTime = this.getWeekAgo(3);\n            }\n        } else if ((parseInt(m) == M) && (parseInt(d) > D) && (parseInt(y) == Y)) {\n            current = (((d - D) + day) * (m - M));\n            current = ((current) + (d - D));\n            \n            if (current < 7) {\n                this.currentTime = (current) + ' hari yang lalu';\n            } else if (current >= 7 && current < 14) {\n                this.currentTime = this.getWeekAgo(1);\n            } else if (current >= 14 && current < 21) {\n                this.currentTime = this.getWeekAgo(2);\n            } else if (current >= 21 && current < day) {\n                this.currentTime = this.getWeekAgo(3);\n            }\n        }\n        else {\n            if (this.endCalDate.includes(M) && this.endCalDate.includes(D)) {\n                current = (month - M) + parseInt(m);\n                this.currentTime = (current == month) && (y - Y) + ' tahun yang lalu';\n            }\n            current = (month - M) + parseInt(m);\n            \n            this.currentTime = (current >= 12) ? (y - Y) + ' tahun yang lalu' : (current) + ' bulan yang lalu';\n        }\n    }\n    \n    getWeekAgo(length) {\n        return (length) + ' minggu yang lalu';\n    }\n    \n    setToLocaleDateString(date) {\n        return date.toLocaleDateString('en-US', {\n            hour12: false\n        });\n    }\n    \n    setToLocaleTimeString(date) {\n        return date.toLocaleTimeString('en-US', {\n            hour12: false\n        });\n    }\n}","import Memories from './memories';\n\nlet articleTime = document.querySelectorAll('time'),\n    cronJob = document.querySelector('#cron-job');\n\narticleTime.forEach(time => {\n    let start = new Date(time.getAttribute('datetime').toString().replace(',','')),\n    refresh = setInterval(async () => {\n        time.innerHTML = await getMemories(start, new Date());\n    }, 10);\n    \n});\n\nlet setCronJob = setInterval(async () => {\n    let start = new Date(\"11/10/2022, 11:00:00\");\n    cronJob.innerHTML = await getCronJob(start, new Date());\n}, 1000);\n\nasync function getCronJob(start,end) {\n    const memories = new Memories(start,end);\n    \n    return memories.getCronJob();\n}\n\nasync function getMemories(start, end) {\n    const memories = new Memories(start, end);\n    \n    return memories.getMemoTime();\n}\n//exports.default = Memories;"],"sourceRoot":""}