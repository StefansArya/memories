{"version":3,"sources":["webpack://memories/./src/memories.js","webpack://memories/./src/index.js"],"names":["Memories","start","end","this","currentTime","day","month","startCalDate","setToLocaleDateString","split","startCalTime","setToLocaleTimeString","endCalDate","endCalTime","toString","match","getAccordingMonth","parseInt","getMonthMemo","m","d","y","h","i","s","M","D","Y","H","I","S","includes","getOnlyTime","getOnlyDate","hour","minutes","seconds","onMonth","onDay","current","currentMinutes","Math","floor","getWeekAgo","length","date","toLocaleDateString","hour12","toLocaleTimeString","document","querySelectorAll","forEach","time","Date","getAttribute","replace","setInterval","async","innerHTML","getMemoTime","getMemories"],"mappings":"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","file":"memories.min.js","sourcesContent":["/**\n * Memories\n * \n * Mengubah waktu pada artikel\n * \n * @author wadahkode <mvp.dedefilaras@gmail.com>\n * @since version 1.0.0\n */\nexport default class Memories {\n    constructor(start, end) {\n        this.start = start;\n        this.end = end;\n        this.currentTime = false;\n        this.day = 0;\n        this.month = 0;\n        this.startCalDate = this.setToLocaleDateString(this.start).split('/');\n        this.startCalTime = this.setToLocaleTimeString(this.start).split(/:| /);\n        this.endCalDate = this.setToLocaleDateString(this.end).split('/');\n        this.endCalTime = this.setToLocaleTimeString(this.end).split(/:| /);\n    }\n    \n    getMemoTime() {\n        if (this.endCalDate.toString().match(this.startCalDate) && this.endCalTime.toString().match(this.startCalTime)) {\n            return 'baru saja';\n        }\n        else {\n            return this.getAccordingMonth();\n        }\n    }\n    \n    getAccordingMonth() {\n        switch(parseInt(this.endCalDate[0])) {\n            case 1: return this.getMonthMemo(31);\n            case 2: return this.getMonthMemo(29);\n            case 3: return this.getMonthMemo(31);\n            case 4: return this.getMonthMemo(30);\n            case 5: return this.getMonthMemo(31);\n            case 6: return this.getMonthMemo(30);\n            case 7: return this.getMonthMemo(31);\n            case 8: return this.getMonthMemo(31);\n            case 9: return this.getMonthMemo(30);\n            case 10: return this.getMonthMemo(31);\n            case 11: return this.getMonthMemo(30);\n            case 12: return this.getMonthMemo(31);\n        }\n    }\n    \n    getMonthMemo(day, month=12) {\n        let [m,d,y] = this.endCalDate,\n            [h,i,s] = this.endCalTime,\n            [M,D,Y] = this.startCalDate,\n            [H,I,S] = this.startCalTime;\n        \n        this.day = day;\n        this.month = month;\n        \n        if (this.endCalDate.includes(M) && this.endCalDate.includes(Y)) {\n            this.getOnlyTime(24,60,60,this.endCalDate.includes(M), this.endCalDate.includes(D));\n            \n            return this.currentTime;\n        } else {\n            this.getOnlyDate(month, day);\n            \n            return this.currentTime;\n        }\n    }\n    \n    getOnlyTime(hour, minutes, seconds, onMonth = false, onDay = false) {\n        let [h,i,s] = this.endCalTime,\n            [H,I,S] = this.startCalTime,\n            current;\n        \n        if (onMonth) {\n            if (onDay) {\n                //console.log((parseInt(i) == I));\n                // seconds\n                if ((parseInt(h) == H) && (parseInt(i) == I) && (parseInt(s) != S)) {\n                    this.currentTime = parseInt(s) + ' detik yang lalu';\n                }\n                // minutes\n                else if ((parseInt(h) == H) && (parseInt(i) != I)) {\n                    current = (parseInt(i) > I) && parseInt(i) - I;\n                    \n                    this.currentTime = (current < minutes) && parseInt(current) + ' menit yang lalu';\n                }\n                // minutes or hour\n                else if ((parseInt(h) != H)) {\n                    current = (parseInt(i) >= I) && (parseInt(i) - I) + minutes;\n                    // jika jam tidak sama dan menit sudah lebih dari 60,\n                    // maka jam sekarang dikurangi jam sebelumnya.\n                    if ((parseInt(h) > H) && (parseInt(h) < hour) && (current >= minutes)) {\n                        this.currentTime = (h - H) + ' jam yang lalu';\n                    } else {\n                        current = (parseInt(I) > i) && (parseInt(minutes - I) + parseInt(i));\n                        \n                        // jika jam sekarang lebih dari jam sebelumnya tetapi\n                        // menitnya masih dibawah 60 maka tampilkan menit yang sudah berlalu\n                        if ((current < 60) && (parseInt(h) > H)) {\n                            this.currentTime = (current) + ' menit yang lalu';\n                        } else {\n                            this.currentTime = (hour - parseInt(H - h)) + ' jam yang lalu';\n                        }\n                    }\n                }\n            } else {\n                let day = (this.day + parseInt(this.endCalDate[1])) - (this.day + parseInt(this.startCalDate[1])),\n                    currentMinutes;\n                \n                if (day == 1) {\n                    if ((parseInt(h) > parseInt(H))) {\n                        current = ((hour + parseInt(h)) - parseInt(H));\n                        if (current > hour) {\n                            this.currentTime = ((parseInt(this.endCalDate[1]) > this.startCalDate[1]) && (parseInt(this.endCalDate[1]) - this.startCalDate[1]) + ' hari yang lalu');\n                        }\n                    } else {\n                        current = ((hour + parseInt(h)) - parseInt(H));\n                        currentMinutes = (parseInt(minutes - I) + parseInt(i));\n                        \n                        if ((current == hour) && (currentMinutes) > minutes) {\n                            this.currentTime = (Math.floor(hour % current) + 1) + ' hari yang lalu';\n                        } else {\n                            //current = (Math.floor(hour % current));\n                            \n                            if (parseInt(currentMinutes) == minutes) {\n                                this.currentTime = (Math.floor(hour % current) + 1) + ' hari yang lalu';\n                            } else {\n                                this.currentTime = ((current) - 1) + ' jam yang lalu';\n                            }\n                        }\n                    }\n                } else {\n                    this.getOnlyDate(this.month, this.day);\n                }\n            }\n        } else {\n            this.getOnlyDate(this.month, this.day);\n        }\n    }\n    \n    getOnlyDate(month, day) {\n        let [m,d,y] = this.endCalDate,\n            [M,D,Y] = this.startCalDate,\n            current;\n        \n        if ((parseInt(m) > M) && (parseInt(d) >= D) && (parseInt(y) == Y)) {\n            current = (((d - D) + day) * (m - M));\n            \n            if (current >= month) {\n                this.currentTime = (m - M) + ' bulan yang lalu';\n            }\n        } else if ((parseInt(m) > M) && (parseInt(d) < D) && (parseInt(y) == Y)) {\n            current = (((d - D) + day) * (m - M));\n            //this.currentTime = (current) + ' hari yang lalu';\n            \n            if (current > 7 && current < 14) {\n                this.currentTime = this.getWeekAgo(1);\n            } else if (current > 14 && current < 21) {\n                this.currentTime = this.getWeekAgo(2);\n            } else if (current > 21 && current < day) {\n                this.currentTime = this.getWeekAgo(3);\n            }\n        } else if ((parseInt(m) == M) && (parseInt(d) > D) && (parseInt(y) == Y)) {\n            current = (((d - D) + day) * (m - M));\n            current = ((current) + (d - D));\n            \n            if (current < 7) {\n                this.currentTime = (current) + ' hari yang lalu';\n            } else if (current >= 7 && current < 14) {\n                this.currentTime = this.getWeekAgo(1);\n            } else if (current >= 14 && current < 21) {\n                this.currentTime = this.getWeekAgo(2);\n            } else if (current >= 21 && current < day) {\n                this.currentTime = this.getWeekAgo(3);\n            }\n        }\n        else {\n            if (this.endCalDate.includes(M) && this.endCalDate.includes(D)) {\n                current = (month - M) + parseInt(m);\n                this.currentTime = (current == month) && (y - Y) + ' tahun yang lalu';\n            }\n            current = (month - M) + parseInt(m);\n            \n            this.currentTime = (current >= 12) ? (y - Y) + ' tahun yang lalu' : (current) + ' bulan yang lalu';\n        }\n    }\n    \n    getWeekAgo(length) {\n        return (length) + ' minggu yang lalu';\n    }\n    \n    setToLocaleDateString(date) {\n        return date.toLocaleDateString('en-US', {\n            hour12: false\n        });\n    }\n    \n    setToLocaleTimeString(date) {\n        return date.toLocaleTimeString('en-US', {\n            hour12: false\n        });\n    }\n}","import Memories from './memories';\n\nlet articleTime = document.querySelectorAll('time');\n\narticleTime.forEach(time => {\n    let start = new Date(time.getAttribute('datetime').toString().replace(',','')),\n    refresh = setInterval(async () => {\n        time.innerHTML = await getMemories(start, new Date());\n    }, 10);\n    \n});\n\nasync function getMemories(start, end) {\n    const memories = new Memories(start, end);\n    \n    return memories.getMemoTime();\n}\n//exports.default = Memories;"],"sourceRoot":""}